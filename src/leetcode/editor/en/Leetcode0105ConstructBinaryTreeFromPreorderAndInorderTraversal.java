//Given preorder and inorder traversal of a tree, construct the binary tree. 
//
// Note: 
//You may assume that duplicates do not exist in the tree. 
//
// For example, given 
//
// 
//preorder =¬†[3,9,20,15,7]
//inorder = [9,3,15,20,7] 
//
// Return the following binary tree: 
//
// 
//    3
//   / \
//  9  20
//    /  \
//   15   7 
// Related Topics Array Tree Depth-first Search 
// üëç 3464 üëé 95

package leetcode.editor.en;

import java.util.HashMap;
import java.util.Map;
import leetcode.editor.TreeNode;

// 2020-07-26 13:14:34
// Jesse Yang
public class Leetcode0105ConstructBinaryTreeFromPreorderAndInorderTraversal{
    // Java: construct-binary-tree-from-preorder-and-inorder-traversal
    public static void main(String[] args) {
        Solution sol = new Leetcode0105ConstructBinaryTreeFromPreorderAndInorderTraversal().new Solution();
        // TO TEST
        
        System.out.println();
    }
//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// Solution: divide&conquer, T(n) = O(n), S(n) = O(n)
/*
Áü•ÈÅì‰∫ÜpreorderÂíåinorderÈáåÈù¢ÁöÑ‰∏ÄÊÆµÂèØ‰ª•ÁªÑÊàê‰∏Ä‰∏™tree
step 0:condition, assuming we know the preorder[preLeft, preRight] and inorder[inLeft, inRight]
step 1: find the root
step 2: find the root's index in inorder array
step 3: calculate the left and right subtree's size
step 4: calculate the left and right subtree's border in inorder and postorder array
 */
class Solution {
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int len = preorder.length;
    
        // key - inorder number, value - inorder number's index
        Map<Integer, Integer> inNumToIdx = new HashMap<>();
        for (int i = 0; i < len; i++) {
            int num = inorder[i];
            inNumToIdx.put(num, i);
        }
        return buildTree(preorder, 0, len - 1, 0, len - 1, inNumToIdx);
    }
    
    /*
     preorder[preLeft, preRight]Ë°®Á§∫ÂΩìÂâçsubTreeÂú®preOrderÁöÑËåÉÂõ¥Ôºåinclusive
     inorder[inLeft, inRight]Ë°®Á§∫ÂΩìÂâçsubTreeÂú®inOrderÈÅçÂéÜ‰∏≠ÁöÑËåÉÂõ¥Ôºåinclusive
     
     Êúâ‰∫ÜÂΩìÂâçÁöÑtreeÁöÑËåÉÂõ¥preorder[preLeft, preRight] Âíå inorder[inLeft, inRight]ÂêéÔºå
     ÂÖàÂèñroot = preOrder[preLeft]ÔºåÊâæÂá∫ÂÆÉÂú®inOrder‰∏≠ÁöÑÁ¥¢Âºï inRootIdx;
     
     ÈáçÁÇπÔºö ÁÑ∂ÂêéÊÄé‰πàÁ°ÆÂÆöleft subtreeÂíåright subtreeÂú®preorderÂíå inorderÈáåÈù¢ÁöÑ‰ΩçÁΩÆ
     preLeft, preRight, inLeft, inRight
     
     Â∑¶Â≠êÊ†ëÔºö
     leftSubtree's size: leftSize = inRootIdx - inLeft;
     ÊâÄ‰ª•left subtree
     Âú®preOrderÂ∫èÂàó‰∏≠ÁöÑËåÉÂõ¥ÊòØ[preLeft + 1, preLeft + leftSize]Ôºå
     Âú®InOrderÂ∫èÂàó‰∏≠ÁöÑËåÉÂõ¥ÊòØ[inLeft, inRootIdx - 1]
     
     Âè≥Â≠êÊ†ëÔºö
     rightSubtree's size: rightSize = inRight - inRootIdx
     ÊâÄ‰ª•right subtree
     Âú®preOrderÂ∫èÂàó‰∏≠Áªô‰Ω†ÁöÑËåÉÂõ¥ÊòØ[preLeft + leftSize + 1, preRight],
     // ‰πüÂèØ‰ª•ÊòØ[preRight - rightSize + 1, preRight]
     Âú®inOrderÂ∫èÂàó‰∏≠ÁöÑËåÉÂõ¥ÊòØ[inRootIdx + 1, inRight]
     */
    private TreeNode buildTree(int[] preorder, int preLeft, int preRight,
            int inLeft, int inRight, Map<Integer, Integer> map) {
        // base case
        if (inLeft > inRight) {
            return null;
        }
        
        int rootVal = preorder[preLeft];
        TreeNode root = new TreeNode(rootVal);
        int inRootIdx = map.get(rootVal); // index of rootVal in inOrder[] array
        int leftSize = inRootIdx - inLeft;
        int rightSize = inRight - inRootIdx;
        
        root.left = buildTree(preorder, preLeft + 1, preLeft + leftSize,
                inLeft, inRootIdx - 1, map);
        root.right = buildTree(preorder, preRight - rightSize + 1, preRight,
                inRootIdx + 1, inRight, map);
        return root;
    }
    
}
//leetcode submit region end(Prohibit modification and deletion)


}